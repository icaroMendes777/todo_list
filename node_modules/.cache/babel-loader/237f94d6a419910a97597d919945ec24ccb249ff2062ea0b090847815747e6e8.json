{"ast":null,"code":"var _jsxFileName = \"/home/icaro/projects/React/todo-react/src/App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport { useState, useRef } from 'react';\nimport './App.css';\nimport Pencils from './pencils.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialTodo = ['Insira suas tarefas aqui', 'Comece apagando essas tarefas'];\n\n//---function just to make it easier to code----\nfunction log() {\n  let arg1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '---';\n  let arg2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  console.log(arg1, arg2);\n}\nfunction App() {\n  _s();\n  const [newTask, setNewTask] = useState('');\n  const [todo, setTodo] = useState(initialTodo);\n  const todoList = useRef(initialTodo);\n\n  //esse state é usado somente para forçar um re-render\n  const [render, setRender] = useState(false);\n  const addTask1 = task => {\n    let newTodo = todo;\n    newTodo.push(task);\n    log('todo', todo);\n    log('new', newTodo);\n    setTodo(newTodo);\n    // log('final  todo',todo);\n  };\n\n  const addTask = () => {\n    if (!newTask) return;\n    todoList.current.push(newTask);\n    setNewTask('');\n\n    //abaixo: somente para causar um re-render\n    setRender(Math.random());\n  };\n\n  //--------------------------------------------\n\n  console.log('---', todo);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lembrar de fazer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input_box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrap_input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Nova tarefa:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              size: \"35\",\n              value: newTask,\n              onChange: e => {\n                if (e.target.value.length < 35) setNewTask(e.target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addTask,\n            className: \"plus_btn\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrap_logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: Pencils,\n            alt: \"lapis\",\n            className: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tarefas_wrap light_shadow\",\n        children: todo.map((el, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item_tarefa light_shadow\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [index + 1, \" - \", el]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"delete_btn\",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 13\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"NKRuXxOW4kKuU2dEBRE9JN7yyak=\");\n_c = App;\n{/*===========================*/}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","useRef","Pencils","initialTodo","log","arg1","arg2","console","App","newTask","setNewTask","todo","setTodo","todoList","render","setRender","addTask1","task","newTodo","push","addTask","current","Math","random","e","target","value","length","map","el","index"],"sources":["/home/icaro/projects/React/todo-react/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport {useState,useRef} from 'react';\nimport './App.css';\n\nimport Pencils from './pencils.png';\n\nconst initialTodo = [\n  'Insira suas tarefas aqui',\n  'Comece apagando essas tarefas'\n]\n\n\n//---function just to make it easier to code----\nfunction log(arg1='---', arg2='')\n{\n  console.log(arg1,arg2);\n}\n\nfunction App() {\n\n  const [newTask,setNewTask] = useState('');\n  const [todo,setTodo] = useState(initialTodo);\n  const todoList = useRef(initialTodo);\n\n\n  //esse state é usado somente para forçar um re-render\n  const [render, setRender] = useState(false);\n\n\n  const addTask1 = (task)=>{\n    let newTodo = todo;\n    newTodo.push(task);\n    log('todo',todo);\n    log('new',newTodo);\n    setTodo( newTodo );\n   // log('final  todo',todo);\n  }\n\n  const addTask = ()=>{\n   \n    if (!newTask) return;\n    todoList.current.push(newTask);\n    setNewTask('');\n\n    //abaixo: somente para causar um re-render\n    setRender(Math.random());\n    \n\n  }\n\n  //--------------------------------------------\n\n\n  console.log('---',todo);\n  return (\n    <>\n\n    {/*\n\n    Formulário  - Nova Tarefa\n    ============================*/}\n  <div className=\"todo_container\">\n    <h1>Lembrar de fazer</h1>\n\n\n    <div className='input_box'>\n        <div className='wrap_input'>\n        <label>\n        Nova tarefa:\n          <input type=\"text\"\n          size='35'\n          value={newTask}\n          onChange={(e) => {\n            if(e.target.value.length < 35)\n            setNewTask(e.target.value);\n          }}\n          ></input>\n        </label>\n\n\n          <button onClick={addTask} className='plus_btn'>+</button>\n\n        </div>\n\n        <div className='wrap_logo'> \n          <img src={Pencils} alt=\"lapis\" className='logo'/>\n        </div>\n      </div>\n      {/**\n      <div className='wrap_div_btn'>\n        <div className=\"div_btn\"> +</div>\n      </div>\n       */}\n      \n    <hr/>\n\n{/*\n\nLista - toDos\n============================*/}\n    <div className=\"tarefas_wrap light_shadow\">\n          \n        { todo.map((el,index)=>{\n          return (\n          <div className=\"item_tarefa light_shadow\" key={index}>\n            <div>{index+1} - {el}</div>\n            <div className=\"delete_btn\">X</div>\n            </div>\n          );\n        })}\n\n    </div>\n\n\n    </div>\n    </>\n  );\n}\n\n\n{/*===========================*/}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}